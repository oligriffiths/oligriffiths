<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[MakeGoodCode]]></title>
  <subtitle><![CDATA[Ramblings of a software architect]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://www.makegoodcode.com/"/>
  <updated>2015-06-30T19:04:20.000Z</updated>
  <id>http://www.makegoodcode.com/</id>
  
  <author>
    <name><![CDATA[Oli Griffiths]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Namespacing in PHP and how we broke it]]></title>
    <link href="http://www.makegoodcode.com/2015/06/30/namespacing-in-PHP-and-how-we-broke-it/"/>
    <id>http://www.makegoodcode.com/2015/06/30/namespacing-in-PHP-and-how-we-broke-it/</id>
    <published>2015-06-30T04:00:00.000Z</published>
    <updated>2015-06-30T19:04:20.000Z</updated>
    <content type="html"><![CDATA[<p>In the wild west that is PHP, we were given a tool, a magical tool to help us organise our code better, to become better programmers, and write better, more distributable code. And what did we do? We bastardised it solely for the purposes of autoloading. THIS IS WHY WE CAN‚ÄôT HAVE NICE THINGS!</p>
<a id="more"></a>
<p>Ok, so here‚Äôs the problem is we‚Äôve bound namespacing to autoloading, which has caused a knock on effect of rendering namespacing largely useless.</p>
<p>In order to achieve autoloading, one needs 2 things:</p>
<ol>
<li>Define a naming convention for class names</li>
<li>Define an autoloader that allows for registration of that naming convention</li>
</ol>
<p>So, let‚Äôs dig in.</p>
<h3 id="1-_Define_a_class_naming_convention:">1. Define a class naming convention:</h3><p>Defining a clear class naming convention is paramount to enable autoloading, but also serves as a good way of standardizing the way the things are named. This helps developers understand the codebase, naming becomes more logical, and debugging becomes easier.<br>Namespacing:</p>
<p>Before continuing, I want to first just elaborate on what a namespace is and the intention.</p>
<p>A namespace is a set of named symbols, usually variables. Names or identifiers are keys allowing access to symbol values. Namespaces provide a level of direction to specific identifiers, thus making it possible to distinguish between identical identifiers. Subsequently relatable to the names of people, where a surname could be thought of as a namespace, this makes it possible to distinguish people who have the same given name.<br>Source: <a href="https://en.wikipedia.org/wiki/Namespace" target="_blank" rel="external">https://en.wikipedia.org/wiki/Namespace</a></p>
<p>Namespaces are intended to allow code to be sandboxed from a naming perspective, to allow one developer to write a class with the same name as another developer, and not have those class names clash when used together. </p>
<p>Ok, now back to naming conventions:</p>
<h4 id="Options:">Options:</h4><ul>
<li>PSR 0/4 naming standard</li>
<li>Custom naming standard</li>
</ul>
<h5 id="A-_PSR_0/4">A. PSR 0/4</h5><p>There exists a self titled group within the PHP community called the PHP Framework Interoperability Group (FIG). The FIG have done great work in trying to standardize various aspects of PHP, from coding style, to autoloading. The FIG have outlined 2 autoloading standards, PSR-0 and PSR-4. These PSRs define class naming conventions, that when used, allows for a PSR-0/4 compatible autoloader to be able to automatically load files, when the class name is used, thus removing the need for require statements.<br><a href="http://www.php-fig.org/psr/psr-0/" target="_blank" rel="external">http://www.php-fig.org/psr/psr-0/</a><br><a href="http://www.php-fig.org/psr/psr-4/" target="_blank" rel="external">http://www.php-fig.org/psr/psr-4/</a></p>
<p>There are several problems with these standards:</p>
<p>The fact that a second standard (PSR-4) was even needed, clearly indicates that the PSR-0 standard was not thought through well enough.</p>
<p>Both standards are about autoloading, yet force a specific naming convention in order to achieve autoloading, they‚Äôre attacking the problem from the wrong side, autoloading enforcing naming convetion, rather than naming convention dictating autoloading.</p>
<p>This is both misleading, and harmful to developers. Sure, defining an autoloading standard, that has specific naming conventions may seem like a good thing, however it paves the way for one single autoloading standard to rule them all! (Until that standard get‚Äôs re-thought and replaced, <strong>cough</strong> PSR-4).</p>
<p>A much better idea would have been to define an autoloading standard that allows naming standard specific rules to be registered against it, separating autoloading from naming standard.<br><a href="https://r.je/php-psr-0-pretty-shortsighted-really.html" target="_blank" rel="external">https://r.je/php-psr-0-pretty-shortsighted-really.html</a></p>
<p>PSR-4 indicates that all fully qualified class names MUST have a namespace. This is completely wrong. In the case of package maintainers this is definitely a MUST, but in the case of user land code, the code that makes up the main non-distributable code of your app, this is completely unnecessary and architecturally inappropriate. User land code should not be namespaced, it has no need to be, you are in full control of it, yet the standard requires it for some unknown reason. Meaning you can‚Äôt use PSR-4 for non-package based autoloading, WAT?</p>
<p><code>Namespaces\Class == file path</code>. The standards have butchered the use of namespacing for autoloading purposes, and autoloading purposes alone. This completely strips namespaces of any code structural relevance and renders them completely useless from a code standpoint. A standard should absolutely not enforce this, or even suggest this. Namespaces are great if used correctly. If autoloading didn‚Äôt use namespaces to map to files, a package maintainer may have at most a 2-3 level namespace:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vendor\Package&#10;Vendor\Type\Package</span><br></pre></td></tr></table></figure>
<p>Namespaces do not need to be more specific than that, there may be some edge case exceptions, but 4 levels really should be the max. </p>
<p>Architectural issues aside, another problem is with the use of use statements in code. As namespaces directly relate to filesystem paths, you end up creating a new namespace for every directory level of your package, ending up with things like this:<br><a href="https://github.com/symfony/symfony/blob/2.8/src/Symfony/Component/HttpKernel/Kernel.php" target="_blank" rel="external">https://github.com/symfony/symfony/blob/2.8/src/Symfony/Component/HttpKernel/Kernel.php</a></p>
<p>I think that speaks for itself.<br>PHP namespacing is partially broken, and this standard highlights those bugs forcing you to change the name of your class.</p>
<p>For example, say I have an abstract controller, I want it‚Äôs path to be <code>package/controller/abstract.php</code>, with PSR-4, let‚Äôs see what the name of the class should be:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Package\Controller\Abstract</span><br></pre></td></tr></table></figure>
<p>Uh oh, PHP doesn‚Äôt allow Abstract as a class name, so what am I to do? I have to now call my class:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Package\Controller\AbstractController</span><br></pre></td></tr></table></figure>
<p>Or something similar.</p>
<p>I‚Äôve now duplicated redundant information in the class name üòû</p>
<p>This same principle also applies to <code>default</code>, <code>use</code>, <code>trait</code>, <code>class</code>, <code>finally</code>, <code>static</code>, <code>public</code>, <code>private</code>, <code>protected</code>. Basically any PHP reserved word can‚Äôt be used a class name, now that really is a problem! </p>
<p>I‚Äôve covered a lot here about naming conventions and autoloading, whilst the two should be separate concepts, autoloading does depend on a naming convention standard. Unfortunately, one can‚Äôt talk about the PSR 0/4 autoloading standards without talking about naming conventions, and vice versa, again, part of the problem.</p>
<h5 id="B-_Custom_standard">B. Custom standard</h5><p>There is nothing stopping you from adopting your own standard, but part of the idea of standardizing PHP is having standards (that aren‚Äôt inherently flawed). Let‚Äôs talk about pure code here, no autoloading, just a naming convention.</p>
<p>English is a funny language, sometimes we refer to things with the qualifier last, and sometimes we refer to things with the qualifier first, for example:</p>
<ul>
<li>A red car</li>
<li>A big car</li>
<li>Telecoms engineer</li>
<li>Telecoms provider</li>
</ul>
<p>In code, we usually do things like:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DashboardController&#10;DatabaseAdapter</span><br></pre></td></tr></table></figure>
<p>Clearly these two standards are opposed to one another, the <strong>qualifier</strong> (or in reality a ‚Äúnamespace‚Äù) sometimes goes at the end, sometimes at the start. English reads from left to right, so it makes more sense for the qualifier part of the class name to come first. Think about a phone book, it‚Äôs indexed by last name, not first name. This makes it easier to read, and easier to find things. Same applies to code. Easier to read code, easier to find code, makes life simpler. </p>
<p>Now it would be easy to split that class name by uppercase character and map that to file name, but that poses a problem with the first example. Think about finding a class in a file called <code>ControllerDashboard</code>, if you wanted to find that file, simply look in <code>controller\dashboard.php</code>. Having <code>DashboardController</code> however means you‚Äôd have to flip the class name round in your head in order to locate it to <code>controller\dashboard.php</code> (you‚Äôre unlikely to store the file in <code>dashboard/controller.php</code>).<br>Then what happens if you have a 3 part class name, say UserRegistrationController? This would now map to <code>controller\registration\user.php</code>, however I‚Äôd really want it to map to <code>controller\user\registration.php</code>. </p>
<p>A filesystem is by very definition of being a tree, a namespaced structure. The root node of a tree defines the starting namespace, and each subdirectory is a sub-namespace of the parent. </p>
<p>What we‚Äôre looking to do is define a standard that makes sense, is easy to read, and ultimately, easy to map to a file path. Sorting the class name by qualifiers, we can easily map to a filesystem path, it‚Äôs readable, easy to understand, and easy for developers to translate from class to file path.</p>
<p>So, the standard that I propose is as follows:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MyClassName =&#62; my/class/name.php&#10;ControllerDashboard =&#62; controller/dashboard.php&#10;DatabaseAdapterMysql =&#62; database/adapter/mysql.php</span><br></pre></td></tr></table></figure>
<p>Simples :)</p>
<p>Ok, now lets actually talk about namespaces, real, PHP namespaces. How can we, and how should we use them in the above example. Well, as explained before, namespaces allow us to package code and keep classes within that code separate from classes in another packages code. </p>
<p>When talking about packages, my mind immediately goes to a directory, containing files. So very simply, why not have the namespace, map to a folder containing files‚Ä¶ Seems like a logical step. This now segues nicely into autoloading.</p>
<h3 id="2-_Define_an_autoloading_pattern">2. Define an autoloading pattern</h3><p>The key term here is <strong>‚Äúpattern‚Äù</strong>. By defining a standard for naming things, we can use that standard in order to inform autoloading for how to translate a class name into a file path. It‚Äôs a simple as that. Now what that pattern is, depends upon the naming convention. So, even if we take PSR-0 or PSR-4 with their flaws, we can still, based off that standard, make an autoloader that conforms to that standard. </p>
<p>Again, this is where things have fallen short. Because the PSR standards are heralded as being THE way to autoload files, the composer autoloader only supports these methods for dynamically autoloading files (that is, translating a class into a file name, not talking about class maps, or file includes here).</p>
<p>Looking at Tom Butler‚Äôs suggestion, this would provide an elegant solution to allow developers who wish to opt in to the PSR standards to use them, and allow other developers who oppose said ‚Äústandards‚Äù to roll their own, and even produce a rival standard for naming conventions and autoloading, wouldn‚Äôt that be great?</p>
<p>So, defining an autoloading standard for the naming convention outlined in point 2 above, I suggest the following.</p>
<ul>
<li>Path names <strong>MUST</strong> be lowercase, always. I can‚Äôt tell you the number of times I‚Äôve had problems between different OS‚Äôs that do or don‚Äôt use case sensitive filesystems. OS X is heavily used in the programming world, yet is case insensitive, linux is by default case sensitive, see the problem there.<br>Class name MUST be split by uppercase letter and map directly to file system path<br>E.g.</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ControllerDashboard =&#62; controller/dashboard.php&#10;DatabaseAdapterMysql =&#62; database/adapter/mysql.php</span><br></pre></td></tr></table></figure>
<ul>
<li>Namespace <strong>MUST</strong> map to a base directory. This does not mean that the namespace == directory structure, as that limits flexibility.<br>For example, composer packages all exist in the following structure:<br><code>vendor/vendor_name/package</code><br>Well what if my name space has 3 parts? <code>Vendor\Type\Package</code>, e.g.<br><code>Symfony\Component\HttpKernel</code>. Or what if I‚Äôm not using composer at all?<br>A base directory merely serves to inform the autoloader that a specific namespace, maps to a specific folder.</li>
<li>A parent namespace <strong>MAY</strong> be mapped to a base directory to remove the need to manually map all ‚Äúpackages‚Äù under a vendor namespace to their respective folders if the sub-namespace == sub-folder.<br>E.g. for the namespace <code>Illuminate\Validation</code>:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Illuminate =&#62; vendor/illuminate.</span><br></pre></td></tr></table></figure>
<p>This allows for:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Illuminate\Validation\ =&#62; vendor/illuminate/validation</span><br></pre></td></tr></table></figure></p>
<p>Using the rules above:</p>
<ul>
<li>non-namespaced code is associated with a base directory</li>
<li>a namespace is associated with a base path to a folder</li>
<li>class name defines the specific path within a folder.</li>
</ul>
<p>The above allows for all of the packages of a specific vendor to be autoloaded if the package name matches the folder name, OR it allows for a specific folder to be registered for a specific package namespace.</p>
<p>This approach also still allows non-namespaced code to be registered to a single directory (your app code). In effect, non-namespaced code is actually namespaced, by the fact that it doesn‚Äôt have a specific namespace, it‚Äôs in the ‚Äúglobal‚Äù namespace. It also allows packaged, namespaced code to be registered to a specific directory. </p>
<h3 id="3-_Auto_loadder_registry">3. Auto loadder registry</h3><p>Whilst PHP offers the ability to register multiple autoloaders since PHP 5, using <code>spl_autoload_register</code> <a href="http://php.net/manual/en/function.spl-autoload-register.php" target="_blank" rel="external">http://php.net/manual/en/function.spl-autoload-register.php</a>], it would be much more convenient if a single autoloader registry existed, that different autoloading standards could be registered. That way, legacy systems could all play nicely together. </p>
<p>Most people are using composer for dependency management, along with the composer autoloader. The problem with the composer autoloader is it just does what composer wants it to do, you can register additional means of translating a class name into file path. You‚Äôre limited to <code>PSR0/4</code>, <code>File include</code> and <code>Classmap</code>. Why cant package developers who don‚Äôt want to use PSR0/4 register alternative autoloaders with composer? You have to register a separate autoloader using <code>spl_autoload_register</code>.</p>
<p>This article by Tom Butler has a very good explaination of this and a proposed solution <a href="https://r.je/php-psr-0-pretty-shortsighted-really.html" target="_blank" rel="external">https://r.je/php-psr-0-pretty-shortsighted-really.html</a></p>
<hr>
<p>And there you go, simple. A standard that allows for a clear, sensible naming convention, that doesn‚Äôt butcher language features, is separated from a separate autoloading standard, and an autoloader implementation that allows for multiple autoloading standards to be registered.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>In the wild west that is PHP, we were given a tool, a magical tool to help us organise our code better, to become better programmers, and write better, more distributable code. And what did we do? We bastardised it solely for the purposes of autoloading. THIS IS WHY WE CAN‚ÄôT HAVE NICE THINGS!</p>]]>
    
    </summary>
    
      <category term="Autoloading" scheme="http://www.makegoodcode.com/tags/Autoloading/"/>
    
      <category term="Namespaces" scheme="http://www.makegoodcode.com/tags/Namespaces/"/>
    
      <category term="PHP" scheme="http://www.makegoodcode.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HMVC and why your web app needs it!]]></title>
    <link href="http://www.makegoodcode.com/2015/01/06/HMVC-and-why-you-should-use-it/"/>
    <id>http://www.makegoodcode.com/2015/01/06/HMVC-and-why-you-should-use-it/</id>
    <published>2015-01-06T17:52:45.000Z</published>
    <updated>2015-06-30T16:42:04.000Z</updated>
    <content type="html"><![CDATA[<p>MVC is a very well defined and understood concept in computer science these days. If you‚Äôre unfamiliar with MVC, I suggest you get reading :)</p>
<p>So, I expect you‚Äôve used MVC whilst building applications, you have your controllers, models and views, all looks good. Whilst this is a great start, and allows you to separate control from data from presentation, the problem is most developers stop there and thing that is the end of the road. Below you can see a representation of a simple MVC triad:</p>
<a id="more"></a>
<p><img src="/assets/HMVC/MVC.png" alt="MVC"></p>
<p>When an interface becomes more complex, this often  leads to developers coupling multiple models to one controller or view in order to create interfaces and functionality that utilises these models. This leads to inflexible and much harder to test code. </p>
<p><img src="/assets/HMVC/MMMVC.png" alt="MMMVC"></p>
<h2 id="What_does_the_‚ÄúH‚Äù_mean?">What does the ‚ÄúH‚Äù mean?</h2><p>In HMVC, the H stands for hierarchical, what this means is that rather than a single monolithic MVC triad where your controller may pull in various different models and have a single view compose the result, your application can be made up of multiple, nested MVC chains, each with a very specific goal.</p>
<p>HMVC aims to simplify some of this, by focusing on ‚Äúcomposing‚Äù functionality and interfaces from self contained MVC triads, the goal is de-coupling and code re-use. </p>
<p><img src="/assets/HMVC/HMVC.png" alt="HMVC"></p>
<p>Take a product listings page for example, on this page, you‚Äôre likely to have a category list on the left, product listing in the centre and a cart on the right hand side for example. All of this can be easily separated out using HMVC. First, we need to decide which is the primary MVC triad, in this case it makes sense for it to be ‚Äúproducts‚Äù. The products view can then be composed of the main products list, and dispatch a request to render the category list and another request to render the cart. Each of those entities can be contained within its own MVC triad, this keeps related functionality grouped together and by definition allows for greater separation of concerns. The same concept also applies to idempotic (state changing, eg POST) requests. Rather than have one controller reach out to multiple models to create multiple new entities the primary controller can make requests to other controllers, and those controllers handle everything within their domain. For example, when placing an order, there are multiple entities that need to be created, an order record, multiple line items for the order, a shipping status, perhaps an invoice or a history item. Each of those entities can be created within their own MVC triad.</p>
<h2 id="Benefits">Benefits</h2><p>One simple benefit of the above approach is you automatically have the option to refresh certain parts of your interface using AJAX. Because each part of the view is generated via it‚Äôs own MVC triad, all you need do is expose that via an HTTP endpoint and you‚Äôre good to go. </p>
<p>One key thing with HMVC is abstracting out the request and response mechanism to separate it from HTTP. This allows for internal calls to work in the same way as an external HTTP request. For more information on this, see my post: </p>
<p>Another added benefit of this approach is testability. As each MVC triad is stand alone, it can be tested very easily, and as the request/response objects have been abstracted and can be mocked internally, the MVC triad has no idea the request is coming internally rather than externally. </p>
<p>So far so good, each part of your interface is rendered independently, which allows each piece to be reused between different interfaces, this is great, less code to write makes for happier developers! We can take this a step further to make our lives even easier, the next step, componentisation!</p>
<h2 id="Components">Components</h2><p>Componentisation is a practice where by related functionality is separated out into it‚Äôs own ‚Äúcomponent‚Äù, in order to make the code reusable and provide a greater separation of concerns. When dealing with HMVC, having components is a major advantage, and allows functionality and interfaces to be composed from reusable and non-reusable (your application‚Äôs domain logic) components. If the component has been built with HMVC in mind, in order to create a composed interface, one only needs to dispatch an internal request to a controller in that component, and bam, interface rendered.</p>
<p>Components can be shared amongst different components, for example, a users component with a user profile may dispatch a request to the orders component to render the users list of orders. Components can also be shared between projects which again increases code reuse, saving you time, win-win. </p>
<h2 id="Conclusion">Conclusion</h2><p>HMVC serves to achieve the following:</p>
<ul>
<li>Greater separation of concerns</li>
<li>Decrease coupling</li>
<li>Compose interfaces and functionality</li>
<li>Increase testability</li>
</ul>
<p>HMVC is a simple concept, that when used effectively can drastically reduce the amount of code you need to write through reusability and composition, and provides a more logical flow to your application. </p>
]]></content>
    <summary type="html">
    <![CDATA[<p>MVC is a very well defined and understood concept in computer science these days. If you‚Äôre unfamiliar with MVC, I suggest you get reading :)</p>
<p>So, I expect you‚Äôve used MVC whilst building applications, you have your controllers, models and views, all looks good. Whilst this is a great start, and allows you to separate control from data from presentation, the problem is most developers stop there and thing that is the end of the road. Below you can see a representation of a simple MVC triad:</p>]]>
    
    </summary>
    
      <category term="Architecture" scheme="http://www.makegoodcode.com/tags/Architecture/"/>
    
      <category term="Design" scheme="http://www.makegoodcode.com/tags/Design/"/>
    
      <category term="HMVC" scheme="http://www.makegoodcode.com/tags/HMVC/"/>
    
      <category term="MVC" scheme="http://www.makegoodcode.com/tags/MVC/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Remove HTTP from your web apps]]></title>
    <link href="http://www.makegoodcode.com/2014/11/25/removing-http-from-web-apps/"/>
    <id>http://www.makegoodcode.com/2014/11/25/removing-http-from-web-apps/</id>
    <published>2014-11-25T16:40:00.000Z</published>
    <updated>2015-06-30T16:42:04.000Z</updated>
    <content type="html"><![CDATA[<p>So you‚Äôre a web developer eh? You make websites and web apps? Well riddle me this, what makes you different from a C++ developer, a command line interface (CLI) app developer, or a mobile developer? The Hyper Text Transfer Protocol (HTTP) right? HTTP is this holy grail of what the modern tech world is built upon, without HTTP there would be no websites, no APIs, no Twitter/Facebook/Instagram!</p>
<p>So Tim Berners Lee, we salute you, but I feel we kind of got lost along the way with how we perceive software development for the web. </p>
<a id="more"></a>
<p>HTTP and the slew of architectures that are built on top of it have enabled a whole new generation of software that 20 years ago would not have been imagined. The problem is, in my experience, that the majority of web developers don‚Äôt know or understand really what HTTP is and how it affects their application.</p>
<p>Removing HTTP from your web app, sounds dumb, your app is built on top of HTTP, why would you want to remove it from the equation? Well, I‚Äôm not talking about removing HTTP from your app entirely, but part of it. Whilst this blog post is aimed more at server side apps, it‚Äôs not limited to server side only. So why would you want to remove it from your app?</p>
<h2 id="What_is_HTTP?">What is HTTP?</h2><p>In order to remove HTTP from your app, you must first understand what exactly HTTP is and how it works. So what IS HTTP anyway and how does it affect web apps? HTTP is a protocol used to allow two computers to communicate with each other in a standardised format. The process is pretty simple; open a socket connection to the host server, send a message in HTTP format, wait for a response, close the connection. The format of the messages sent between the two computers is pretty simple, using key-value pairs, separated by a new line. That is it, that‚Äôs all an HTTP message is, text. The problem is that we‚Äôve let this communication format leak into our web apps without really understanding the consequences. How many times have you set a cookie or an HTTP header from within your app code? I know I‚Äôve done it!</p>
<p>HTTP is incredibly simple, you can even perform the simplest of HTTP requests right from your terminal using telnet, give it a try:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet example.com 80&#10;&#10;Trying 93.184.216.119...&#10;Connected to example.com.&#10;Escape character is &#39;^]&#39;.</span><br></pre></td></tr></table></figure>
<p>at this point you can type messages to be sent to the server, so type the below:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET / HTTP/1.1&#10;host: example.com</span><br></pre></td></tr></table></figure>
<p>The first line defines the request format <code>GET</code>, the path to the resource <code>/</code> and the HTTP version <code>1.1</code>. This first line is the minimum you need. The <code>host</code> header is not always reqired, only for hosts using virtual servers (which is the majority), and is required for <code>example.com</code>.</p>
<p>After <code>host</code> hit enter twice, this empty new line tells the server that the request is complete.</p>
<p>You should now be presented with the response from the server, the headers and response body (html) for example.com.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK&#10;Accept-Ranges: bytes&#10;Cache-Control: max-age=604800&#10;Content-Type: text/html&#10;Date: Tue, 25 Nov 2014 16:13:41 GMT&#10;Etag: &#34;359670651&#34;&#10;Expires: Tue, 02 Dec 2014 16:13:41 GMT&#10;Last-Modified: Fri, 09 Aug 2013 23:54:35 GMT&#10;Server: ECS (ewr/1584)&#10;X-Cache: HIT&#10;x-ec-custom-error: 1 &#10;Content-Length: 1270&#10;&#10;&#60;!doctype html&#62;&#10;&#60;html&#62;&#10;&#60;head&#62;&#10;...</span><br></pre></td></tr></table></figure>
<p>The format is really very simple, in the same way as you can send headers (meta data) in the request as key-value pairs, the response also contains headers that inform the client about the response. For more information on standard HTTP headers, see <a href="http://en.wikipedia.org/wiki/List_of_HTTP_header_fields" target="_blank" rel="external">http://en.wikipedia.org/wiki/List_of_HTTP_header_fields</a>. Following the headers is a blank new line that signifies the separation between the headers and the body.</p>
<p>Think about it this way, what differentiates a web app from a desktop app? The way that one interfaces with the software and how those messages are transferred from user input, to the software and back as some kind of output. With a desktop app, that communication happens within the framework that you‚Äôre using, events are captured (key down, clicking a button, etc), and handled by the runtime UI framework. Those messages are then passed down to your app, which will typically cause some change in state, and the UI is then updated to reflect that. A CLI app‚Äôs interface is STDIN and STDOUT. A web app‚Äôs interface IS HTTP. It‚Äôs easy to confuse the communication interface for a web app with the user interface, HTML, however this is not the case. </p>
<h3 id="HTML_!=_HTTP">HTML != HTTP</h3><p>HTML is merely a presentation format, it has nothing to do with HTTP directly. Browsers conform to a standard for how to interact with that HTML and how it interacts with HTTP. For example, what happens when you click a hyperlink, submit a form or how to process an <img> tag, but HTML itself is independent from HTTP. HTML, CSS and JS form a user interface framework for displaying the state of your app to a user, this is all. </p>
<h2 id="HTTP_Request">HTTP Request</h2><p>Anyway, I digress. First things first, we request something from the server, a resource. There are typically 2 ways to request a resource, either through a resource path e.g. </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/posts/1&#10;``` &#10;&#10;or the less preferred query string, e.g.</span><br></pre></td></tr></table></figure>
<p>/posts.php?id=1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(the query string approach used to be very common on websites, but has since been replaced with the resource path as the preferred method of routing which is inline with the URI specification). I will be focusing on the resource path approach.&#10;&#10;Most implementations of routing via a resource path will use some form of request rewriting within the web server software, and internally re-route the request to a single entry file for the web application, this then kicks off bootstrapping the application. &#10;&#10;At this point we can separate what you see **(HTML)**, from how you see it **(HTTP)**. That covers the communication from a users browser, to your server and through your HTTP server (Apache, NginX, IIS, etc) and into your app. We can&#39;t remove HTTP from the equation quite yet, unless you&#39;re merely serving a static asset (HTML page, JS, CSS, image, etc). The next thing we need HTTP for is how to route to the specific resource within your app that the user is requesting.&#10;&#10;###Routing&#10;&#10;Any dynamic application needs to perform routing, that is, taking information from the request and working out where to route that request internally, which controller to instantiate and what method to invoke on that controller (this is the most common pattern, there are other ways to deal with a routed request too). Now, how an application will handle routing is entirely up to the application and out of scope for this blog post, but we can make the assumption that the app needs to know what the user is requesting, and this information needs to be made available to certain parts of the app. &#10;&#10;Assuming we&#39;re using the resource path method of routing, the resource being requested is part of the first line of the HTTP request. The first line contains the request format (GET/POST/PUT/DELETE), the path and the HTTP version (1.1 usually). &#10;&#10;e.g.</span><br></pre></td></tr></table></figure></p>
<p>GET /posts/1 HTTP/1.1<br>```</p>
<p>Most web server software will make this value available to you through some kind of global variable, in the case of PHP that would be <code>$_SERVER[&#39;REQUEST_URI&#39;]</code>. </p>
<p>There are additional pieces of information that are contained within the request that are pertinent to how a request is handled. These include, but are not limited to:</p>
<ul>
<li>query params</li>
<li>data (POST/PUT data)</li>
<li>cookies</li>
<li>authorization info</li>
<li>request content type</li>
<li>response content type</li>
<li>last modified date</li>
</ul>
<p>All of this information can be encapsulised within a request object. Such an object should be abstracted in such a way that it can be decoupled from HTTP itself. So let‚Äôs have a go at what that might look like:</p>
<ul>
<li>attributes - identify the request target</li>
<li>parameters - request params (query string)</li>
<li>data - POST/PUT data</li>
<li>persistent data - cookies</li>
<li>authorisation - authorisation header data extracted into a unified format</li>
<li>request type - request content type</li>
<li>response type - response content type</li>
<li>meta - any other meta info, e.g. HTTP headers</li>
</ul>
<p>As you can see, the above can be applied very easily to an HTTP request, but also be applied to any other kind of request, CLI/Socket/internal. An interesting thing to note is that this format can be used internally within your app to represent a ‚Äúrequest‚Äù as it is now decoupled from HTTP, which makes HMVC much easier. </p>
<h2 id="HTTP_Response">HTTP Response</h2><p>Now that we‚Äôve abstracted a request, we should be able to do the same with the response:</p>
<ul>
<li>data - your HTML/JSON/XML</li>
<li>persistent data - cookies</li>
<li>content type - response type</li>
<li>last modified - date the resource was last modified, used for caching</li>
<li>meta - additional meta info, e.g. headers. </li>
</ul>
<p>What the above effectively means, is that you can abstract out the request/response from HTTP, and then effectively ‚Äúbolt-on‚Äù an HTTP dispatching layer in front of your app. This allows the internals of your app to be independent from the delivery mechanism (HTTP) itself, and you merely have a layer that transforms the input and output into an HTTP friendly format. The same can then be applied to other interfaces like CLI for example, without requiring any app code changes. </p>
<h2 id="Benefits">Benefits</h2><p>Some of the benefits of this approach are:</p>
<ul>
<li><strong>testability</strong>: your code becomes much easier to test as it does not depend on an HTTP related functionality.</li>
<li><strong>portability</strong>: your code can be ported between applications and used in different contexts, HTTP, service based, CLI, etc. </li>
<li><strong>componentisation</strong>: it allows you to componentise your application, by having an internal request be identical to an HTTP request. </li>
<li><strong>HMVC</strong>: becomes significantly easier to achieve as your ‚Äúcomponents‚Äù can now be invoked internally, allowing you to separate concerns between components, and ‚Äúcompose‚Äù functionality. </li>
</ul>
<p>Everything I‚Äôve talked about here is just one step in making good code, the better the separation of concerns, the better your code. </p>
]]></content>
    <summary type="html">
    <![CDATA[<p>So you‚Äôre a web developer eh? You make websites and web apps? Well riddle me this, what makes you different from a C++ developer, a command line interface (CLI) app developer, or a mobile developer? The Hyper Text Transfer Protocol (HTTP) right? HTTP is this holy grail of what the modern tech world is built upon, without HTTP there would be no websites, no APIs, no Twitter/Facebook/Instagram!</p>
<p>So Tim Berners Lee, we salute you, but I feel we kind of got lost along the way with how we perceive software development for the web. </p>]]>
    
    </summary>
    
      <category term="HTTP" scheme="http://www.makegoodcode.com/tags/HTTP/"/>
    
      <category term="PHP" scheme="http://www.makegoodcode.com/tags/PHP/"/>
    
      <category term="Terminal" scheme="http://www.makegoodcode.com/tags/Terminal/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Ember - First Experiences]]></title>
    <link href="http://www.makegoodcode.com/2014/09/12/ember-first-experiences/"/>
    <id>http://www.makegoodcode.com/2014/09/12/ember-first-experiences/</id>
    <published>2014-09-12T20:27:05.000Z</published>
    <updated>2015-06-30T16:42:55.000Z</updated>
    <content type="html"><![CDATA[<p>Here starts my baptism of fire with Ember.js, the highs, the lows, and the hacking!</p>
<p>My story is pretty typical to a point. I built a single page web app in native JS and a spattering (well, more of a spilt paint bucket) of jQuery, only to realise after I‚Äôd finished that Ember existed. Short of wanting to jump out of the window once I‚Äôd realised how much time I might have saved, I decided to see what would actually be involved in converting the app to Ember. </p>
<a id="more"></a>
<p>So, first things first I imported the library and started bootstrapping my app. To my surprise, the basics came off without a hitch, understanding how Ember operates seemed like second nature to me. I come from a backend PHP background using highly convention driven opinionated frameworks, so Ember wasn‚Äôt a huge lift. Whilst those terms (highly contention driven, opinionated) may sound scary, they‚Äôre some of the main attractions of Ember to me.</p>
<p>Whilst researching Ember, I found a lot of arguments of ‚ÄúEmber forces me to program a certain way‚Äù, and ‚Äúwhat if I want to do things my way, angular let‚Äôs me do that‚Äù. Whilst there is some truth in those arguments, the conventions and opinionated principles that Ember builds on are designed to make your life easier, trust me, no one is out to try and make your life harder. </p>
<h2 id="Concepts_and_Conventions">Concepts and Conventions</h2><p>Think about it this way, the Ember team have set out some guidelines on how they consider things should be done. Those decisions have come from a team of experienced and well learned developers, who have all made the same mistakes as you and I in the past, and set out to try and fix those. It‚Äôs a well known fact that people operate better with boundaries (cite), they provide guidance on an agreed upon way of doing things. Having said that, if you want to get down and dirty with the engine under the hood, you can, nothing is stopping you having all the flexibility you want. However, most developers don‚Äôt need to do this. Ember exposes a complete set of APIs that enable you to build a well structured, and maintainable web app. The APIs are intuitive, and simple to use, once you understand the design patterns behind them. One other important thing to note about convention driven frameworks is that if all the developers in your company follow the same conventions, along with an entire community that follows the same conventions, then you know you can look at another Ember developers code or even entire application and immediately know what is going on, and where to find things. The same can‚Äôt be said for other frameworks that leave those conventions up to you. </p>
<p>The barrier to entry with Ember is what people have referred to as a steep learning curve. Well, for me this wasn‚Äôt really the case. The learning curve was shallow as I already had a tonne of experience with the same principles and design patterns that Ember uses, however I understand that not everyone is in the same boat as me. If you‚Äôve come from building JS apps using native JS and jQuery for example, and have never used, or heard of a design pattern, or even MVC for that matter, the learning curve will be greater. However, bear in mind that that learning curve isn‚Äôt strictly a learning curve for Ember, those design patterns and principles are core to software engineering, and you really should know them anyway, regardless of Ember. Knowing and understanding design patterns will make you a better developer, guaranteed. (Sources)</p>
<h2 id="First_up,_Ember_vs_Ember_Data">First up, Ember vs Ember Data</h2><p>I digress, back to Ember. So what stumbling blocks did I encounter? First was understanding the difference between Ember, and Ember data. This isn‚Äôt always clear, as tutorials often use both together, so let me clarify. Ember provides the stateful application framework upon which you build your app. It‚Äôs responsible for providing routing, controllers, views, templates (thankfully Ember makes a separation of views and templates, more on that in another blog post) and data bindings (to name a few). The model layer of Ember is left up to you, you can use static data, AJAX requests or just about any data source you can use in a browser. Ember data is a data store and persistency layer that works seamlessly with Ember (as expected) that provides model objects, type casting on model properties, relationships between model objects and persistency to an external data source (e.g. a REST api). Ember data makes it easy to model your data layer and keep that data in sync with your remote data source. No other JS framework that I‚Äôm aware of has anything similar to Ember data.  </p>
<h2 id="Project_structure">Project structure</h2><p>So, Ember vs Ember data was stumbling block number one. The second was working out where to put my code, business logic and all that. Ember has certain conventions on how to handle events and actions, however it‚Äôs not always abundantly clear when to use which. For example, one can create a computed property on the model, the controller or the view, there isn‚Äôt much guidance on which option you choose. Same thing goes for actions, they can be placed on the controller, specific route, or application route, and bubble up from the controller to the app route. Events are another option when it comes to dealing with user interaction, and you may be tempted to use event bindings on the view to respond to user actions when in reality what you really need is an action on the controller. So for the sale of clarity, let me try and clarify:</p>
<h3 id="Computed_properties:">Computed properties:</h3><p>Computed (or ‚Äúobservable‚Äù) properties are properties that depend on something else, that can be another property that when changed causes the computed property to be re-evaluated, or depend on some external dependcy like formatting a date to a relative date for example.<br>If the data that you‚Äôre computing directly relates to a model objects data, then you‚Äôre usually best putting the computed property on the model object itself. If however the property relates to perhaps a group of model objects, the number of model objects, or the state of some other properties in a controller (eg menu open or closed, user logged in or out) then the property should go in the controller. Lastly, if the property relates to something that is purely display driven, like a currency symbol for example, then the view is the most appropriate place. Computed properties can be placed on ANY ember object, this includes models, views, controllers, and any objects they contain in their declaration, ie.e, anthing within the <code>extend()</code> function call.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var Person = Ember.Object.extend(&#123;&#10;  // these will be supplied by `create`&#10;  firstName: null,&#10;  lastName: null,&#10;&#10;  fullName: function() &#123;&#10;    var firstName = this.get(&#39;firstName&#39;);&#10;    var lastName = this.get(&#39;lastName&#39;);&#10;&#10;   return firstName + &#39; &#39; + lastName;&#10;  &#125;.property(&#39;firstName&#39;, &#39;lastName&#39;)&#10;&#125;);&#10;&#10;var tom = Person.create(&#123;&#10;  firstName: &#39;Tom&#39;,&#10;  lastName: &#39;Dale&#39;&#10;&#125;);&#10;&#10;tom.get(&#39;fullName&#39;) // &#39;Tom Dale&#39;</span><br></pre></td></tr></table></figure>
<p>In the above example, if either <code>firstName</code> or <code>lastName</code> changes, then <code>fullName</code> will be re-evaluated. Any bindings that are attached to <code>fullname</code> will then be updated.</p>
<p>The benefit of computed properties being part of the core framework, means that they‚Äôre implementation is super effecient, the same can‚Äôt be said of other frameworks that have imlpemented the same via dirty checking. Dirty checking requires maintaing the previous value of EVERY bound variable, and checking the value at the end of each run loop to see if it has changed. This is a collosal waste of compute cycles and will seriously degrage your performance as your app grows, force you to do things <a href="http://java.dzone.com/articles/improving-angular-dirty" target="_blank" rel="external">like this</a>.</p>
<p>For further reading, see: <a href="http://emberjs.com/api/classes/Ember.ComputedProperty.html" target="_blank" rel="external">http://emberjs.com/api/classes/Ember.ComputedProperty.html</a></p>
<h3 id="Actions:">Actions:</h3><p>Actions exist to alter the state of the application in some way. Think of an action as transitioning to a new view, submitting a form, or any other action that you would want to catch and manually alter say properties on a model, or open a menu for example. Actions start at the controller level, if not found they bubble up to the controllers route, and if not found there, up to the application route. Knowing where to put the action can be tricky, but I follow the following rule: if the action is affecting something in the current model, or view state, it should belong in the controller. If the action should be shared amongst controllers that may be nested under the same route (think split view, master/detail layouts) then place the action in the main controllers route. If the action relates to overall system state, place it in the application route. Actions are really simple to hook up:</p>
<p>JS:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">App.ListController = Ember.Controller.extend(&#123;</span><br><span class="line">  <span class="comment">// the initial value of the `search` property</span></span><br><span class="line">  search: <span class="string">''</span>,</span><br><span class="line"></span><br><span class="line">  actions: &#123;</span><br><span class="line">    query: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// the current value of the text field</span></span><br><span class="line">      <span class="keyword">var</span> query = <span class="keyword">this</span>.get(<span class="string">'search'</span>);</span><br><span class="line">      <span class="keyword">this</span>.transitionToRoute(<span class="string">'search'</span>, &#123; query: query &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>HTML:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">header</span>&gt;</span></span><br><span class="line">  &#123;&#123;input type="text" value=search action="query"&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="title">header</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>In the above example, the controller property <code>search</code> is being bound to the value of an input box, thus changing the input box will change the search value and vice versa. The input box is generated via a template helper that binds the enter keydown event, to submit the action specified in <code>&quot;action&quot;</code>, in this case, <code>query</code> on the controller. On order to declare an action, just define a function below an ‚Äúactions‚Äù property on the controller, simple as that. Actions can recieve an input as arguments. Most of the built in actions can send some data about the action, in the case above, the argument would be the value of ‚Äúsearch‚Äù, in this case, unnecessary due to the binding anyway.</p>
<p>For further reading, see: <a href="http://emberjs.com/guides/controllers/#toc_storing-application-properties" target="_blank" rel="external">http://emberjs.com/guides/controllers/#toc_storing-application-properties</a></p>
<h3 id="Events:">Events:</h3><p>Views can respond to all the regular DOM events that you‚Äôd expect. Sometimes you will have to decide if the interaction you‚Äôre dealing with is an action or better handled as an event. I use the simple rule that if the interaction does not affect the state of anything within the application, be that controllers or models, or need to do any behind the scenes Ajax requests or something similar, then it may be a good candidate for a view event. Examples of this are social sharing icons, scroll tracking, modifying dom elements based non state driven values (scroll, screen width, etc), or just about anything that has a dependency on jQuery (plugins for example). Events are super easy to hook up, and follow a similar convention to actions  </p>
<p>JS:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">App.ClickableView = Ember.View.extend(&#123;</span><br><span class="line">  click: <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"ClickableView was clicked!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>HTML:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;#view "clickable"&#125;&#125;</span><br><span class="line">This is a clickable area!</span><br><span class="line">&#123;&#123;/view&#125;&#125;</span><br></pre></td></tr></table></figure></p>
<p>In the above example, a click event is being defined on the view called <code>Clickable</code>, then a click handler is being added to the template via the view helper. Events bubble up from the target view to each parent view in succession, until the root view.</p>
<p>For further reasing, see: <a href="http://emberjs.com/guides/views/handling-events/" target="_blank" rel="external">http://emberjs.com/guides/views/handling-events/</a></p>
<h2 id="Routes">Routes</h2><p>Third was understanding how to use routes properly. Ember follows a route first principle, this means that everything within an amber app is driven off a route. Routes collect models, controllers and views, they‚Äôre essentially the conductor between all 3 and mediate the actions between them.</p>
<p>At first this seems like a strange concept, I found myself thinking ‚ÄúI just want to bind this model to this view‚Äù. Whilst it is indeed possible to use parts of the MVC triad outside of a route context, Ember has this embedded route system for a reason. Firstly, you‚Äôre making a web app remember, and what single thing is the driving factor for all web apps (HTTP aside)? The URL. The URL is central to everything we do on the web, the source of truth, so why not use the URL to drive application state? Seems like a logical thing to assume. If you grab a URL, copy it, and paste it in an email to your mum (mom) then she would expect to be able to click that link and see what you see. This is largely the case for server side apps, so why not client side? Well, the Ember team decided on this design paradigm from the outset. As the route ties everything together, you automatically get the benefit of shareable URLs, forward and back buttons work, and sub routes allow you to do all sorts of cool nested state handling. So don‚Äôt try and fight it, embrace it, routes make perfect sense that they should hold the state of your application.</p>
<p>So how does one define a route, it‚Äôs dead simple:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">App.Router.map(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.route(<span class="string">"about"</span>, &#123; path: <span class="string">"/about"</span> &#125;);</span><br><span class="line">  <span class="keyword">this</span>.route(<span class="string">"favorites"</span>, &#123; path: <span class="string">"/favs"</span> &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>Now, when the user visits /about, Ember.js will render the about template. Visiting /favs will render the favorites template. Note that you can leave off the path if it is the same as the route name. In the above example, the 2nd argument for the ‚Äúabout‚Äù route could be left off.</p>
<p>Within templates, there‚Äôs a handy template helper <code>NaN;</code></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;#link-to 'about'&#125;&#125;<span class="tag">&lt;<span class="title">img</span> <span class="attribute">class</span>=<span class="value">"logo"</span>&gt;</span>&#123;&#123;/link-to&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>Simple, right?</p>
<p>For further reading, see: <a href="http://emberjs.com/guides/routing/defining-your-routes/" target="_blank" rel="external">http://emberjs.com/guides/routing/defining-your-routes/</a></p>
<hr>
<h2 id="Final_thoughts">Final thoughts</h2><p>Once I got the hang of the above, everything else was pretty straight forward, assuming you know MVC. The data bindings for templates are incredibly powerful, the handlebars template syntax is straight forward, components are so useful and easy to write, Ember Data is just incredible, and everything feels cohesive as it‚Äôs all been developed with the same conventions and opinions. I can‚Äôt stress enough how awesome Ember.js is, go try it out!</p>
<p>In my next blog post on Ember, I‚Äôll go through some getting started points to get you on your way, in the mean time, checkout the <a href="http://emberjs.com/guides/" target="_blank" rel="external">Ember guides</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Here starts my baptism of fire with Ember.js, the highs, the lows, and the hacking!</p>
<p>My story is pretty typical to a point. I built a single page web app in native JS and a spattering (well, more of a spilt paint bucket) of jQuery, only to realise after I‚Äôd finished that Ember existed. Short of wanting to jump out of the window once I‚Äôd realised how much time I might have saved, I decided to see what would actually be involved in converting the app to Ember. </p>]]>
    
    </summary>
    
      <category term="Ember" scheme="http://www.makegoodcode.com/tags/Ember/"/>
    
      <category term="js" scheme="http://www.makegoodcode.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[The Blog]]></title>
    <link href="http://www.makegoodcode.com/2014/09/11/the-blog/"/>
    <id>http://www.makegoodcode.com/2014/09/11/the-blog/</id>
    <published>2014-09-11T17:56:06.000Z</published>
    <updated>2015-06-30T16:42:04.000Z</updated>
    <content type="html"><![CDATA[<p>So I finally got round to starting a blog. And you‚Äôd think that‚Äôs a simple matter these days.</p>
<p>There are many blogging tools and applications available, Wordpress, Joomla, Tumblr, Blogger, Ghost, etc. One thing I knew I didn‚Äôt want was a hosted blog, ‚Äòcos, you know, I‚Äôm a developer and must have control over everything! </p>
<a id="more"></a>
<p>So Wordpress.com, Tumblr and Blogger were out. I knew I didn‚Äôt want to have a costly hosting solution either and have to worry about uptime, server maintenance, etc, so Wordpress, Joomla, and so on were out.</p>
<h2 id="Ghost"><a href="https://ghost.org" target="_blank" rel="external">Ghost</a></h2><p>I turned my attention to <a href="https://ghost.org" target="_blank" rel="external">Ghost</a> since hearing about it‚Äôs kick starter campaign so set about getting that installed on my local machine. Ghost is awesome. Super simple to setup, runs on node.js, looks pretty, write in markdown, themes, etc etc. Seemed perfect. The only thing is that it runs on node, this means I would need a node hosting solution, and would likely still have to deal with uptime, bla bla bla. So I got to thinking, ‚ÄúI wonder if there is a static site generator for Ghost?‚Äù</p>
<p>So I set about trying to find a static site generator for Ghost. As it turns out, some clever soul made just the thing, AND it integrates with Github pages automatically (awesome, right?). The product is called buster, as in ghost busters, geeks are clever like that! Anyway, another node app later and I have buster installed. Super easy to operate, just run the buster command, point it at your Ghost local server, and voila, a static version of your Ghost site. A few config options later and the repo is updated on Github.</p>
<h2 id="Github_Pages"><a href="https://pages.github.com" target="_blank" rel="external">Github Pages</a></h2><p>I‚Äôd heard of <a href="https://pages.github.com" target="_blank" rel="external">Github Pages</a>, a free static hosting solution that turns a branch on a repository into a website. You can even have custom domain names. I like the sound of this, utilise Github‚Äôs infrastructure, perfect.</p>
<p>Awesome sauce, free hosted blog, with free open source tools, this made me very happy. Well done me I thought. </p>
<p>So in principle, job done, all good to go. That was until I realised that in order to write blog posts I had to be sat in front of my computer. Who wants to do that these days? I have a 30 minute commute to work each day, 15 of which is spent sitting on a subway train, AND/OR standing on a hot ass platform. I wanted to make use of this time, aside from listening to Spotify, it seemed like I could use this time to my advantage. The only problem is that my blog resided within Ghost, and I had no way to get it out. There had to be a better solution to this. </p>
<p>So, blog mark 1 was successful, however didn‚Äôt quite fit the bill for the workflow I wanted. Next up, Jekyll!</p>
<h2 id="Jekyll"><a href="http://jekyllrb.com" target="_blank" rel="external">Jekyll</a></h2><p>I‚Äôd heard of <a href="http://jekyllrb.com" target="_blank" rel="external">Jekyll</a> when looking at Github pages. GH pages uses Jekyll on the server side to process the static files. This seemed like a good starting place so I went ahead and started researching Jekyll.</p>
<p>The main issue I found with Jekyll was the amount if configuration options. The website goes into a lot of detail about how to set things up, which is great, it‚Äôs just a little daunting to a noob. The platform is very powerful, but with great power comes great responsibility! Jekyll seemed just a bit too over the top for my needs, I just wanted a simple blog that i could write in markdown format. Additionally Jekyll is written in ruby, and not knowing ruby, if I ever wanted to write an extension or adapt it in any way, I‚Äôd have to learn ruby, and my days are busy enough as it is.</p>
<p>I kept searching, adamant that there must be a simple blogging tool that would let me write markdown files and push them to Github pages as static files. Luckily my colleague came to the rescue, with a recommendation, enter Hexo. </p>
<h2 id="Hexo"><a href="http://hexo.io" target="_blank" rel="external">Hexo</a></h2><p><a href="http://hexo.io" target="_blank" rel="external">Hexo</a> is a simple, node based, blogging application, with a built in static site generator, AND Github pages support. Getting setup is super easy, and customizing the template was pretty straight forward too. I was able to get a blog installed and setup within 30 minutes. Hexo comes with all the usual blogging functionality you‚Äôd expect, posts, pages, categories, tagging, etc. There‚Äôs a preview mode that allows you to view the blog before you publish it. Posts support front matter in YML format to set date, title, tags, etc. It all works as expected. Great, good to go, first blog post up, now what. </p>
<h2 id="GitMongo"><a href="https://itunes.apple.com/us/app/gitmongo/id593450102" target="_blank" rel="external">GitMongo</a></h2><p>So there I was, sitting on the train, writing a blog post in the notes all on my iPhone and feeling all smug. Then it dawned on me that there is one more step I could cut out of the process, the copying and pasting/updating of blog posts from notes to markdown files. It occurred to me that if I could find a git client for iOS, I could write the posts directly on my phone, commit and push them, thus allowing me to edit the raw posts themselves and negating the need to copy and paste. I came across <a href="https://itunes.apple.com/us/app/gitmongo/id593450102" target="_blank" rel="external">GitMongo</a> and found out it did exactly what I was after. Whilst the editor is a little on the basic side, and breaks words and screen bounds (quite annoying), it does work well enough. </p>
<p>So I used GitMongo to write draft posts, then preview them on my desktop to make sure it all looks good, do any cleanup neccessary and then publish the post. One additional thing I did to aid the workflow was to use the master branch of my repo to hold only the blog posts, I then include this as a got submodule within a hexo branch to keep things nice and clean and separated.   </p>
<p>If you want to have a look at how all this works, just clone out this blog, it‚Äôs <a href="https://github.com/oligriffiths/blog" target="_blank" rel="external">public on Github</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>So I finally got round to starting a blog. And you‚Äôd think that‚Äôs a simple matter these days.</p>
<p>There are many blogging tools and applications available, Wordpress, Joomla, Tumblr, Blogger, Ghost, etc. One thing I knew I didn‚Äôt want was a hosted blog, ‚Äòcos, you know, I‚Äôm a developer and must have control over everything! </p>]]>
    
    </summary>
    
      <category term="blogging" scheme="http://www.makegoodcode.com/tags/blogging/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Welcome]]></title>
    <link href="http://www.makegoodcode.com/2014/07/27/welcome/"/>
    <id>http://www.makegoodcode.com/2014/07/27/welcome/</id>
    <published>2014-07-27T18:09:52.000Z</published>
    <updated>2015-06-30T16:37:40.000Z</updated>
    <content type="html"><![CDATA[<p>So after holding this domain for nearly 2 years, I decided to actually get round to setting up this blog.<br><a id="more"></a><br>In any case, welcome. I‚Äôve been wanting to setup a coding blog for some time, but you know, life got in the way!</p>
<p>The purpose of this blog is to showcase good coding practices, useful design patterns, new tools and services, and generally anything interesting that will make your life as a coder better.</p>
<p>So, what better way to start than to blog about how I went about <a href="/2014/09/11/the-blog/">setting up this blog</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>So after holding this domain for nearly 2 years, I decided to actually get round to setting up this blog.<br>]]>
    
    </summary>
    
  </entry>
  
</feed>
